// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2020 15:26:40"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CS;
reg LS;
reg RR;
reg RS;
// wires                                               
wire CL;
wire LL;
wire RL;
wire T0;
wire T1;

// assign statements (if any)                          
Lab3 i1 (
// port map - connection between master ports and signals/registers   
	.CL(CL),
	.CS(CS),
	.LL(LL),
	.LS(LS),
	.RL(RL),
	.RR(RR),
	.RS(RS),
	.T0(T0),
	.T1(T1)
);
initial 
begin 
#400000 $finish;
end 

// CS
initial
begin
	CS = 1'b0;
	CS = #170000 1'b1;
	CS = #160000 1'b0;
end 

// LS
initial
begin
	LS = 1'b0;
	LS = #90000 1'b1;
	LS = #80000 1'b0;
	LS = #80000 1'b1;
	LS = #80000 1'b0;
end 

// RS
initial
begin
	RS = 1'b0;
	RS = #50000 1'b1;
	RS = #40000 1'b0;
	RS = #40000 1'b1;
	RS = #40000 1'b0;
	RS = #40000 1'b1;
	RS = #40000 1'b0;
	RS = #40000 1'b1;
	RS = #40000 1'b0;
end 

// RR
initial
begin
	RR = 1'b0;
	RR = #30000 1'b1;
	RR = #20000 1'b0;
	RR = #20000 1'b1;
	RR = #20000 1'b0;
	RR = #20000 1'b1;
	RR = #20000 1'b0;
	RR = #20000 1'b1;
	RR = #20000 1'b0;
	RR = #20000 1'b1;
	RR = #20000 1'b0;
	RR = #20000 1'b1;
	RR = #20000 1'b0;
	RR = #20000 1'b1;
	RR = #20000 1'b0;
	RR = #20000 1'b1;
	RR = #20000 1'b0;
end 
endmodule

